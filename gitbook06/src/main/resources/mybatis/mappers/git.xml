<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="git">
	<select id="findList" parameterType="string" resultType="gitvo">
		<![CDATA[
		select a.no,a.user_no as userNo,a.group_no as groupNo,
			   a.description, a.visible,a.git_name as gitName,
			    DATE_FORMAT(a.reg_date,'%Y-%m-%d %H:%i') as regDate
		from git a, user b 
		where a.user_no = b.no
		and b.id = #{id} and a.group_no is NULL
		order by reg_date desc
		]]>
	</select>

	<select id="getGitItem" parameterType="map" resultType="gitvo">
		<![CDATA[
		select a.no, a.user_no as userNo , a.group_no as groupNo, 
			   a.description, a.visible, a.git_name as gitName, 
		      DATE_FORMAT(a.reg_date,'%Y-%m-%d %H:%i') as regDate
		from git a, user b  
		where a.user_no = b.no 
		and a.git_name=#{repoName} 
		and b.id=#{id}
		]]>
	</select>



	<insert id="insertGit" parameterType="gitvo">
		<![CDATA[
			insert into git 
			values(null,#{userNo},#{groupNo},#{description},#{visible},#{gitName},now())
		]]>
	</insert>

	<delete id="deleteRepository" parameterType="gitvo">
		<![CDATA[
			delete from git where no=#{no} 
		]]>
	</delete>


	<update id="updateVisible" parameterType="gitvo">
		<choose>
			<when test=' visible=="public" '>
		<![CDATA[
			update  
			git set visible='private' 
			where no=#{no}	
		]]>
			</when>
			<otherwise>
		<![CDATA[
			update  git 
			set visible='public'
			where no=#{no}	
		]]>
			</otherwise>
		</choose>
	</update>

	<select id="findUserNo" parameterType="map" resultType="long">
		<![CDATA[
			select no from user where id = #{id}
		]]>
	</select>

	<insert id="insertAlarm" parameterType="map">
		<![CDATA[
			insert into alarm values(null, #{userNo}, "commit", #{contents}, 'uncheck', now(), #{gitNo})
		]]>
	</insert>

	<insert id="insertSchedule" parameterType="map">
		<![CDATA[
			insert into schedule values(null, #{commitDate}, #{contents_short}, 'commit', #{userNo}, (select group_no from git where no = #{gitNo}), #{gitNo})
		]]>
	</insert>

	<insert id="insertTimeline" parameterType="map">
      <![CDATA[
         insert into timeline values(null, #{contents}, now(), #{visible}, (select group_no from git where no = #{gitNo}), (select no from user where id = #{id}), 'commit')
      ]]>
   </insert>

	<select id="findListGroup" parameterType="map"
		resultType="gitvo">
		<![CDATA[
		select a.no,a.user_no as userNo,a.group_no as groupNo,
			   a.description, a.visible,a.git_name as gitName,
				DATE_FORMAT(a.reg_date,'%Y-%m-%d %H:%i') as regDate, b.id as userId
		from git a join user b on a.user_no = b.no
		where a.group_no = #{groupNo} and 
			a.no not in(select no
						  from git
						where user_no != #{userNo} and visible="private"
						)
		order by reg_date desc
		]]>
	</select>

	<select id="findMyList" parameterType="string"
		resultType="gitvo">
		<![CDATA[
		select a.no,a.user_no as userNo,a.group_no as groupNo,
			   a.description, a.visible,a.git_name as gitName,
			    DATE_FORMAT(a.reg_date,'%Y-%m-%d %H:%i') as regDate
		from git a, user b 
		where a.user_no = b.no
		and b.id = #{id}
		order by reg_date desc
		]]>
	</select>

	<delete id="deleteGroupAll" parameterType="long">
		<![CDATA[		
				delete from git where group_no = #{no}
			]]>
	</delete>


	<select id="getGroupNo" parameterType="map" resultType="long">
		<![CDATA[
				select a.group_no
				 from git a, user b
				where a.user_no = b.no 
				and a.git_name = #{repoName}
				and b.id = #{id}
				and b.no = #{userNo}
		]]>
	</select>
	
	
		<select id="findVisible" parameterType="map" resultType="string">
		<![CDATA[
			select visible from git where no = #{gitNo}
		]]>
	</select>
	
	<select id="findGroupNo" parameterType="map" resultType="long">
		<![CDATA[
			select group_no from git where user_no = (select U.no from user U where U.id = #{gitOwnerId}) and git_name = #{repoName}
		]]>
	</select>
	
	<select id="findGroupMemberIdList" parameterType="long" resultType="string">
		<![CDATA[
			select U.id from `group` G join group_list GL on (G.no = GL.group_no) join user U on (GL.user_no) = U.no where G.no = #{groupNo} and GL.`grant` != 'user_req' order by GL.`grant`
		]]>
	</select>
	
	
	<select id="findGitInfoByNo" parameterType="map" resultType="gitvo">
		
		  <![CDATA[
			select G.no as no, G.user_no as userNo, G.group_no as groupNo, G.description as description, G.visible as visible, G.git_name as gitName, G.reg_date as regDate, U.id as userId 
			from git G
			join user U on (G.user_no = U.no)
			where G.no = #{alarmRefNo}
		]]>

	</select>
	
	<select id="findGitNoByUserInfo" parameterType="map" resultType="long">
		<![CDATA[
				select no
            from git
            where user_no = (select U.no from user U where U.id=#{gitOwnerId})
            and git_name = #{repoName}
		]]>
	</select>
</mapper>
