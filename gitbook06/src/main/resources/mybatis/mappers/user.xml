<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">
	<select id="findByIdAndPassword" parameterType="uservo"
		resultType="uservo">
		<![CDATA[
		
		select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no as ProfileNo, b.image, b.nickname, b.profile_contents as profileContents
			from user a join profile b on a.no = b.user_no 
			where a.id = #{id}
			and a.password = password(#{password})
			and a.user_status = 1

		]]>
	</select>

	
	<select id="friendList" parameterType="map"
		resultType="uservo">
		<![CDATA[
		select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no as ProfileNo, b.image, b.nickname, b.profile_contents as profileContents
		from user a join profile b on a.no = b.user_no
		where a.no in (
			select d.friend_no
			from user c join friends d on c.no = d.user_no
			where id = #{id} and status = #{kind}
		)
		]]>
	</select>
	
	<select id="friendNaviList" parameterType="map"
		resultType="uservo">
		<![CDATA[
		select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no as ProfileNo, b.image, b.nickname, b.profile_contents as profileContents
		from user a join profile b on a.no = b.user_no
		where a.no in (
			select d.friend_no
			from user c join friends d on c.no = d.user_no
			where id = #{id} and status = #{kind}
		)
		order by b.nickname
		limit 9
		]]>
	</select>
	
	<select id="friendListReq" parameterType="map"
		resultType="uservo">
		<![CDATA[
		select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no as ProfileNo, b.image, b.nickname, b.profile_contents as profileContents
		from user a join profile b on a.no = b.user_no
		where a.no in (
			select c.no
			from user c join friends d on c.no = d.user_no
			where d.friend_no = #{no} and status = #{kind}
		)
		]]>
	</select>
	
	<select id="frinedNo" parameterType="map" resultType="string">
		<![CDATA[
		select no
		from user
		where id=#{friendid}
		]]>
	</select>
	
	<select id="friendstatus" parameterType="map" resultType="string">
		<![CDATA[
		select distinct(status)
		from friends
		where (user_no=#{userno} and friend_no=#{friendno}) or (user_no=#{friendid} and friend_no=#{userid})
		]]>
	</select>

	<select id="friendInfo" parameterType="string"
		resultType="friendvo">
		<![CDATA[
		select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no, b.image, b.nickname, b.profile_contents as profileContents
		from user a left join profile b on a.no = b.user_no
		where a.id = #{friendid}

		]]>
	</select>
	
	<select id="friendAdd" parameterType="map">
		<![CDATA[
		update friends 
			set status = "친구" 
		where user_no = #{friendno} and friend_no = #{userno}
		]]>
	</select>
	
	<insert id="friendAdd2" parameterType="map">
		<![CDATA[
		insert into friends values('친구',  #{userno}, #{friendno})
		]]>
	</insert>
	
	<select id="friendDelete" parameterType="map">
		<![CDATA[
		delete from friends 
			where (user_no = #{userno} and friend_no = #{friendno}) or 
				  (user_no = #{friendno} and friend_no = #{userno})
		]]>
	</select>
	
	<select id="searchList" parameterType="map" resultType="friendvo">
		<![CDATA[
		select *
		from(
		(select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no as ProfileNo, b.image, b.nickname, b.profile_contents as profileContents, '친구' as 'status' 
			from user a join profile b on a.no = b.user_no
			where a.no in (
				select b.friend_no
				from user a join friends b on a.no = b.user_no
				where a.id = #{userid} and b.status = '친구') 
			and (a.id like '%${keyword }%' or a.name like '%${keyword }%' or b.nickname like '%${keyword }%') and a.id != #{userid} and a.user_status = 1)
		union
		(select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no as ProfileNo, b.image, b.nickname, b.profile_contents as profileContents, '요청중' as 'status'  
			from user a join profile b on a.no = b.user_no
			where a.no in (
				select b.friend_no
				from user a join friends b on a.no = b.user_no
				where a.id = #{userid} and b.status = '요청') 
			and (a.id like '%${keyword }%' or a.name like '%${keyword }%' or b.nickname like '%${keyword }%') and a.id != #{userid}  and a.user_status = 1)
		union
		(select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no as ProfileNo, b.image, b.nickname, b.profile_contents as profileContents, '요청중' as 'status'  
			from user a join profile b on a.no = b.user_no
			where a.no in (
				select b.user_no
			    from user a join friends b on a.no = b.friend_no
			    where b.friend_no = #{userno} and b.status = '요청')
			and (a.id like '%${keyword }%' or a.name like '%${keyword }%' or b.nickname like '%${keyword }%') and a.id != #{userid}  and a.user_status = 1)
		union
		(select a.no, a.id, a.password, a.phone, a.name, a.birthday, a.gender, a.join_date as joinDate, b.no as ProfileNo, b.image, b.nickname, b.profile_contents as profileContents, '팔로우' as 'status'  
			from user a join profile b on a.no = b.user_no
			where (a.no not in (
				select b.friend_no
				from user a join friends b on a.no = b.user_no
				where a.id = #{userid})) and
				(a.no not in (
				select b.user_no
				from user a join friends b on a.no = b.friend_no
				where a.id = #{userid}))
			and (a.id like '%${keyword }%' or a.name like '%${keyword }%' or b.nickname like '%${keyword }%') and a.id != #{userid}  and a.user_status = 1)
		) a order by nickname
		]]>
	</select>

	<select id="countEmail" parameterType="string" resultType="int">
		<![CDATA[
			select count(*) as counted from user where id = #{email}
		]]>
	</select>

	<insert id="addUser" parameterType="uservo">
		<![CDATA[
			insert into user values(null, #{id}, password(#{password}), #{phone}, #{name}, #{birthday}, #{gender}, now(), '1')
		]]>
	</insert>
	
	<insert id="addProfile" parameterType="uservo">
		<![CDATA[
			insert into profile values(null, '/gitbook/assets/img/users/default.jpg', #{name}, 'No profile introduction', (select no from user U where U.id = #{id} and U.password = password(#{password})))
		]]>
    
	</insert>
	

	<select id="findPassword" parameterType="map"
		resultType="uservo">
		<![CDATA[
		select no,name,id,password
			from user 
			where id = #{id}
			and password=password(#{password})
			and user_status = 1
		]]>
	</select>


	<select id="findEmail" parameterType="uservo" resultType="string">
		<![CDATA[
			select id from user where phone = #{phone} and name = #{name} and birthday = #{birthday} and user_status = 1
		]]>
	</select>
	
	<update id="updatePassword" parameterType="uservo">
		<![CDATA[
			update user set password = password(#{password}) where id=#{id}
		]]>
	</update>
	
	<select id="getProfile" parameterType="string" resultType="uservo">
		<![CDATA[
			select no as ProfileNo, image, nickname, profile_contents as profileContents from profile where user_no = (select no from user where id = #{id})
		]]>
	</select>
	
	<update id="updateProfile" parameterType="uservo">
		<![CDATA[
			update profile set image = #{image}, nickname = #{nickname}, profile_contents = #{profileContents} where no = #{ProfileNo} and user_no = (select no from user where id = #{id})
		]]>
	</update>
	
	<update id="updateUserInfo" parameterType="uservo">
		<choose>
			<when test='password != null and password != ""'>
				<![CDATA[
					update user set password = password(#{password}), name = #{name}, phone = #{phone}, birthday = #{birthday}, gender = #{gender} where id = #{id}
				]]>
			</when>
			<otherwise>
				<![CDATA[
					update user set name = #{name}, phone = #{phone}, birthday = #{birthday}, gender = #{gender} where id = #{id}
				]]>
			</otherwise>
		</choose>
	</update>
	
	<select id="findUserId" parameterType="string"
		resultType="string">
		<![CDATA[
		select id
			from user 
		where no = #{id}
		]]>
	</select>
	
	<update id="userStatus" parameterType="long">
		<![CDATA[
		update user set user_status = '0' where no = #{no}
		]]>
	</update>
	
	<select id="getUserNo" parameterType="string"
		resultType="long">
		<![CDATA[
		select no
			from user 
		where id = #{id}
		]]>
	</select>
	
	<select id="getId" parameterType="long"
		resultType="string">
		<![CDATA[
		select id
			from user 
		where no = #{no}
		]]>
	</select>
	
	<select id="getUserStatus" parameterType="string"
		resultType="string">
		<![CDATA[
		select user_status
			from user 
		where id = #{userid}
		]]>
	</select>
</mapper>
